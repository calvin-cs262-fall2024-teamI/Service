DROP TABLE IF EXISTS Review;
DROP TABLE IF EXISTS Workout;
DROP TABLE IF EXISTS Message;
DROP TABLE IF EXISTS MatchCriteria;
DROP TABLE IF EXISTS PersonalTrainer;
DROP TABLE IF EXISTS User;

CREATE TABLE User (
    ID SERIAL PRIMARY KEY,
    emailAddress VARCHAR(50) NOT NULL,
    password VARCHAR(50) NOT NULL,
    username VARCHAR(50) NOT NULL,
    location VARCHAR(100),
    experienceLevel VARCHAR(50),
    profilePicture VARCHAR(255)
);

CREATE TABLE PersonalTrainer (
    ID SERIAL PRIMARY KEY,
    certificationLevel VARCHAR(50),
    experienceOnJob INTEGER,
    cost DECIMAL(10, 2),
    userID INTEGER REFERENCES User(ID) ON DELETE CASCADE
);

CREATE TABLE Message (
    ID SERIAL PRIMARY KEY,
    senderID INTEGER REFERENCES User(ID) ON DELETE CASCADE,
    receiverID INTEGER REFERENCES User(ID) ON DELETE CASCADE,
    content TEXT NOT NULL,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE Workout (
    ID SERIAL PRIMARY KEY,
    workoutType VARCHAR(50) NOT NULL,
    time TIME NOT NULL,
    location VARCHAR(100),
    userID INTEGER REFERENCES User(ID) ON DELETE CASCADE
);

CREATE TABLE MatchCriteria (
    ID SERIAL PRIMARY KEY,
    workoutType VARCHAR(50),
    experienceLevel VARCHAR(50),
    location VARCHAR(100),
    trainerOrNot BOOLEAN,
    userID INTEGER REFERENCES User(ID) ON DELETE CASCADE
);

CREATE TABLE Review (
    ID SERIAL PRIMARY KEY,
    rating INTEGER NOT NULL CHECK (rating >= 1 AND rating <= 5),
    comment TEXT,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    userID INTEGER REFERENCES User(ID) ON DELETE CASCADE
);

GRANT SELECT ON User TO PUBLIC;
GRANT SELECT ON PersonalTrainer TO PUBLIC;
GRANT SELECT ON Message TO PUBLIC;
GRANT SELECT ON Workout TO PUBLIC;
GRANT SELECT ON MatchCriteria TO PUBLIC;
GRANT SELECT ON Review TO PUBLIC;